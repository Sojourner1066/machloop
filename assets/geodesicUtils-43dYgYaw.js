import{ag as _,s as C,bx as D,by as tt,bz as z,bA as et,aX as W,aj as nt,bB as st,bC as at,bD as it}from"./index-BCSVvjKE.js";function X(t){if(!t)return null;const n=t.wkid;if(n)return tt[n];const e=t.wkt2??t.wkt;return e?ot(e):null}function ot(t){const n=et.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const c=parseFloat(e[1]),s=parseFloat(e[2]);return isNaN(c)||isNaN(s)?null:{a:c,f:s===0?0:1/s}}function G(t){const n=X(t);if(rt(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function rt(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function E(t,n,e){const{a:c,eSq:s}=G(e),a=Math.sqrt(s),i=Math.sin(n[1]*z),l=c*n[0]*z;let r;return s>0?r=c*((1-s)*(i/(1-s*(i*i))-1/(2*a)*Math.log((1-a*i)/(1+a*i))))*.5:r=c*i,t[0]=l,t[1]=r,t}function I(t){return _(t)&&!!X(t)}function lt(t,n="square-meters"){if(t.some(i=>!I(i.spatialReference)))throw new C("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let i=0;i<t.length;i++){const l=t[i],r=l.spatialReference,{radius:h,densificationRatio:u}=G(r),o=h*u;e.push(ht(l,o))}const c=[],s=[0,0],a=[0,0];for(let i=0;i<e.length;i++){const{rings:l,spatialReference:r}=e[i];let h=0;for(let u=0;u<l.length;u++){const o=l[u];E(s,o[0],r),E(a,o[o.length-1],r);let M=a[0]*s[1]-s[0]*a[1];for(let g=0;g<o.length-1;g++)E(s,o[g+1],r),E(a,o[g],r),M+=a[0]*s[1]-s[0]*a[1];h+=M}h=D(h,"square-meters",n),c.push(h/-2)}return c}function ut(t,n="meters"){if(!t)throw new C("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(c=>!I(c.spatialReference)))throw new C("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let c=0;c<t.length;c++){const s=t[c],{spatialReference:a}=s,i=s.type==="polyline"?s.paths:s.rings;let l=0;for(let r=0;r<i.length;r++){const h=i[r];let u=0;for(let o=1;o<h.length;o++){const M=h[o-1][0],g=h[o][0],m=h[o-1][1],d=h[o][1];if(m!==d||M!==g){const p=new H;J(p,[M,m],[g,d],a),u+=p.distance}}l+=u}l=D(l,"meters",n),e.push(l)}return e}function ht(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new C("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!I(e))throw new C("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const c=t.type==="polyline"?t.paths:t.rings,s=[],a=[0,0],i=new H;for(const r of c){const h=[];s.push(h),h.push([r[0][0],r[0][1]]);let u,o,M=r[0][0],g=r[0][1];for(let m=0;m<r.length-1;m++){if(u=r[m+1][0],o=r[m+1][1],M===u&&g===o)continue;const d=[M,g];J(i,[M,g],[u,o],e);const{azimuth:p,distance:b}=i,y=b/n;if(y>1){for(let j=1;j<=y-1;j++)U(a,d,p,j*n,e),h.push(a.slice());U(a,d,p,(b+Math.floor(y-1)*n)/2,e),h.push(a.slice())}U(a,d,p,b,e),h.push(a.slice()),M=a[0],g=a[1]}}const l=st(W,e);return t.type==="polyline"?new at({paths:s,spatialReference:l}):new it({rings:s,spatialReference:l})}class H{constructor(n=0,e=void 0,c=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=c}}function U(t,n,e,c,s){const a=n[0],i=n[1],l=a*z,r=i*z,h=(e??0)*z,{a:u,b:o,f:M}=G(s),g=Math.sin(h),m=Math.cos(h),d=(1-M)*Math.tan(r),p=1/Math.sqrt(1+d*d),b=d*p,y=Math.atan2(d,m),j=p*g,S=j*j,R=1-S,f=R*(u*u-o*o)/(o*o),$=1+f/16384*(4096+f*(f*(320-175*f)-768)),k=f/1024*(256+f*(f*(74-47*f)-128));let v,A,w,q=c/(o*$),F=2*Math.PI;for(;Math.abs(q-F)>1e-12;)w=Math.cos(2*y+q),v=Math.sin(q),A=Math.cos(q),F=q,q=c/(o*$)+k*v*(w+k/4*(A*(2*w*w-1)-k/6*w*(4*v*v-3)*(4*w*w-3)));const N=b*v-p*A*m,x=Math.atan2(b*A+p*v*m,(1-M)*Math.sqrt(S+N*N)),P=M/16*R*(4+M*(4-3*R)),O=Math.atan2(v*g,p*A-b*v*m)-(1-P)*M*j*(q+P*v*(w+P*A*(2*w*w-1)));return t[0]=(l+O)/z,t[1]=x/z,t}function J(t,n,e,c){const s=n[0]*z,a=n[1]*z,i=e[0]*z,l=e[1]*z,{a:r,b:h,f:u,radius:o}=G(c),M=i-s,g=Math.atan((1-u)*Math.tan(a)),m=Math.atan((1-u)*Math.tan(l)),d=Math.sin(g),p=Math.cos(g),b=Math.sin(m),y=Math.cos(m);let j,S,R,f,$,k,v,A,w,q,F=1e3,N=M;do{if(v=Math.sin(N),A=Math.cos(N),R=Math.sqrt(y*v*(y*v)+(p*b-d*y*A)*(p*b-d*y*A)),R===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;$=d*b+p*y*A,k=Math.atan2(R,$),w=p*y*v/R,S=1-w*w,f=$-2*d*b/S,isNaN(f)&&(f=0),q=u/16*S*(4+u*(4-3*S)),j=N,N=M+(1-q)*u*w*(k+q*R*(f+q*$*(2*f*f-1)))}while(Math.abs(N-j)>1e-12&&--F>0);if(F===0){const Q=o,T=Math.acos(Math.sin(a)*Math.sin(l)+Math.cos(a)*Math.cos(l)*Math.cos(i-s))*Q,B=i-s,V=Math.sin(B)*Math.cos(l),Y=Math.cos(a)*Math.sin(l)-Math.sin(a)*Math.cos(l)*Math.cos(B),Z=Math.atan2(V,Y);return t.azimuth=Z/z,t.distance=T,t.reverseAzimuth=void 0,t}const x=S*(r*r-h*h)/(h*h),P=x/1024*(256+x*(x*(74-47*x)-128)),O=h*(1+x/16384*(4096+x*(x*(320-175*x)-768)))*(k-P*R*(f+P/4*($*(2*f*f-1)-P/6*f*(4*R*R-3)*(4*f*f-3)))),K=Math.atan2(y*Math.sin(N),p*b-d*y*Math.cos(N)),L=Math.atan2(p*Math.sin(N),p*b*Math.cos(N)-d*y);return t.azimuth=K/z,t.distance=O,t.reverseAzimuth=L/z,t}function ft(t){return I(t)?t:nt(t)?W.WGS84:null}export{ft as N,ut as R,H as b,U as j,J as q,lt as v,I as y};
