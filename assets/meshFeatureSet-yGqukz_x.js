import{n as h,am as l,bE as y,a9 as S,B as g}from"./index-BCOvYjsd.js";import E from"./Mesh-DEguDwvk.js";import{i as N,a as D}from"./External-Fsptsv17.js";import{s as M}from"./infoFor3D-dHKPbXlj.js";import{d as F}from"./FeatureSet-Cu8erNuw.js";import{n as T,i as b}from"./meshFeatureAttributes-DRdeZRE4.js";import"./axisAngleDegrees-CN4ucq9S.js";import"./quat-MYA8xVX1.js";import"./mat3f64-q3fE-ZOt.js";import"./quatf64-aQ5IuZRd.js";import"./vec42-BnNr_Lzs.js";import"./MeshComponent-Bq4wFe-8.js";import"./meshProperties-C4iW0Ukm.js";import"./MeshLocalVertexSpace-DuiteUA8.js";import"./MeshTransform-C7zzxeaA.js";import"./mat4f64-Dk4dwAN8.js";import"./MeshVertexAttributes-DyZCDKxT.js";import"./meshVertexSpaceUtils-Dau0Be-_.js";import"./triangulationUtils-B3-InWnA.js";import"./earcut-D9gy186-.js";import"./Indices-CfCU2dWR.js";import"./plane-x80nX-sS.js";import"./vec4f64-o2zAXfmz.js";import"./deduplicate-BeLHZ6C6.js";import"./projectPointToVector-C7Ha1avU.js";import"./vertexSpaceConversion-BUkaXppT.js";import"./spatialReferenceEllipsoidUtils-BYsBZJyV.js";import"./computeTranslationToOriginAndRotation-BveyOUsd.js";import"./vec3-CMpiTgOg.js";import"./BufferView-D0KxYgAz.js";import"./vec4-_4-I52wh.js";const w=()=>h.getLogger("esri.rest.support.meshFeatureSet");function pt(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=F.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=O(o,e.assetMaps),i=t.sourceSpatialReference??S.WGS84,u=e.globalIdFieldName,{outFields:a}=t,f=a!=null&&a.length>0?I(a.includes("*")?null:new Set(a)):()=>({});for(const m of r){const p=L(m,u,i,o,n);s.features.push(new g({geometry:p,attributes:f(m)}))}return s}function I(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function L(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const u=T(t.attributes,e,r.transformFieldRoles),a=y.fromJSON(t.geometry);a.spatialReference=e;const f=b(t.attributes,r.transformFieldRoles),m=e.isGeographic?"local":"georeferenced",p=P(i);return p?E.createWithExternalSource(u,p,{extent:a,transform:f,vertexSpace:m,unitConversionDisabled:!0}):E.createIncomplete(u,{extent:a,transform:f,vertexSpace:m})}var c;function O(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,u=r.assetHash,a=r.assetURL,f=r.conversionStatus,m=r.seqNo,p=M(i,t.supportedFormats);if(!p){w().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const d=l(e,s,()=>({files:new Map}));l(d.files,n,()=>({name:n,type:i,mimeType:p,status:$(f),parts:[]})).parts[m]={hash:u,url:a}}return e}function P(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==c.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new N(n.url,n.hash))}e.push(new D(r.name,r.mimeType,s))}return e}function $(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,pt as meshFeatureSetFromJSON};
