import{ck as O,eH as U,fT as E,aa as F,fU as X,n as Y,b1 as D,fV as G,o as s,v as l,w as H}from"./index-BCOvYjsd.js";import{u as T}from"./scaleUtils-82eOO8r3.js";import{l as W,u as k,t as I}from"./gridUtils-uOpmPd7r.js";import{f,d as _,c as q}from"./hitTestSelectUtils-ZCN-4jMi.js";import{r as V,a as A}from"./RouteLayerInteraction-JZNs_YA9.js";import"./geodesicUtils-l2kYOEqz.js";import"./quantityUtils-mYsORi5g.js";import"./projectVectorToVector-DpGcT9dO.js";import"./projectPointToVector-C7Ha1avU.js";import"./vec42-BnNr_Lzs.js";import"./vec4f64-o2zAXfmz.js";import"./plane-x80nX-sS.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-BQ5ZB9Re.js";import"./elevationInfoUtils-DCmTT6QO.js";import"./ElevationInfo-JgKjtv7t.js";import"./lengthUtils-CDEkLj2v.js";import"./GraphicsLayer-i2TSWouj.js";import"./BlendLayer-DIDCz6DR.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils--jgndNN5.js";import"./parser-DAsQTtHB.js";import"./ScaleRangeLayer-Bk87vUHD.js";import"./Stop-CSSECxDa.js";import"./networkEnums-F2v8c2U3.js";let o=class extends O{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){var t;return U(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var e;const{spatialReference:t,grid:i}=this;if(!i||!t||!E(i.center.spatialReference,t))return null;try{const r=F(i.center,t),n=t.isWrappable&&((e=this.view)==null?void 0:e.center)!=null?X(r.x,this.view.center.x,t):r.x;return f(n,r.y,r.z)}catch(r){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:e,dynamicScaling:r}=i;return e<1?null:W(e,t,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?D(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*T(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?k(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,i,e){var u;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(u=e.feature)!=null&&u.attributes&&_ in e.feature.attributes)return[];const a=e.coordinateHelper.arrayToPoint(t),p=r.distance*(e.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,p)}fetchCandidatesSync(t,i){const e=[],{grid:r,effectiveViewRotation:n,gridRotation:a,gridCenter:p,viewMetersPerPixel:u,viewMetersPerSRUnit:g,offsetScaleFactor:S,spatialReference:h,gridMetersPerStride:C,pixelsPerStride:$}=this;if(!(r&&u&&g&&p&&h&&S&&C&&$)||!r.dynamicScaling&&$<I||!E(t.spatialReference,h))return e;const y=F(t,h),z=f(y.x,y.y,y.z),c=m(z,-a,p,-n),P=C/g*S,d=B(c,P,p),{shouldSnapX:v,shouldSnapY:w}=J(d,c,i,u,g);if(!v&&!w)return[];const L=f((v?d:c)[0],(w?d:c)[1]),M=m(L,a,p,n),b=m(d,a,p,n);if(w){const R=j(d,c,P,"y"),x=m(R,a,p,n);e.push(new V({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=j(d,c,P,"x"),x=m(R,a,p,n);e.push(new V({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&w&&e.push(new A(M,e[0],e[1],!1)),e}};s([l({constructOnly:!0})],o.prototype,"view",void 0),s([l()],o.prototype,"options",void 0),s([l()],o.prototype,"grid",null),s([l()],o.prototype,"effectiveViewRotation",null),s([l()],o.prototype,"gridRotation",null),s([l()],o.prototype,"gridCenter",null),s([l()],o.prototype,"offsetScaleFactor",null),s([l()],o.prototype,"spatialReference",null),s([l()],o.prototype,"gridMetersPerStride",null),s([l()],o.prototype,"viewMetersPerPixel",null),s([l()],o.prototype,"viewMetersPerSRUnit",null),s([l()],o.prototype,"pixelsPerStride",null),s([l()],o.prototype,"updating",null),o=s([H("esri.views.interactive.snapping.GridSnappingEngine")],o);const m=(t,i,e,r)=>{const n=q(t[0],t[1],t[2]);return G(n,G(n,n,e,i),e,r)},B=(t,i,e)=>{const r=(t[0]-e[0])/i,n=(t[1]-e[1])/i,a=Math.trunc(r),p=Math.trunc(n),u=Math.round(r%1),g=Math.round(n%1),S=e[0]+(a+u)*i,h=e[1]+(p+g)*i;return f(S,h)},J=(t,i,e,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(t[0]-i[0])/r,p=(t[1]-i[1])/r;return{shouldSnapX:Math.abs(a*n)<e,shouldSnapY:Math.abs(p*n)<e}},j=(t,i,e,r)=>{if(r==="y"){const a=i[0]>t[0]?1:-1;return f(t[0]+e*a,t[1])}const n=i[1]>t[1]?1:-1;return f(t[0],t[1]+e*n)};export{o as GridSnappingEngine};
