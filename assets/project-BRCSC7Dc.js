import{ap as l,f5 as n,dG as f,o as s,v as i,a9 as d,w as S,cH as g,c3 as y,fr as w,a6 as R,h3 as v}from"./index-BnvXCOal.js";let o=class extends l{constructor(e){super(e),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:f(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],o.prototype,"geometries",void 0),s([i({type:d,json:{read:{source:"outSR"}}})],o.prototype,"outSpatialReference",void 0),s([i()],o.prototype,"transformation",void 0),s([i()],o.prototype,"transformForward",void 0),o=s([S("esri.rest.support.ProjectParameters")],o);const $=o,j=g($);async function J(e,t,r){t=j(t);const a=y(e),p={...a.query,f:"json",...t.toJSON()},m=t.outSpatialReference,c=f(t.geometries[0]),u=w(p,r);return R(a.path+"/project",u).then(({data:{geometries:h}})=>v(h,c,m))}export{$ as m,J as n};
