import{V as f,x as T,f3 as _,a5 as S,s as b,cD as y,f4 as D,n as g,ep as L,eY as v,eW as w,eZ as A,am as E,ev as I,bC as C,d3 as N,o as s,v as d,bp as k,bs as $,w as R}from"./index-BK4NQ6A4.js";import{S as c,i as M,E as G,m as O,h as U}from"./KnowledgeGraphSublayer-DREXsyzS.js";import{S as P}from"./MultiOriginJSONSupport-DUKBa-dg.js";import{l as j}from"./ArcGISService-DgY4yFJj.js";import{p as F}from"./BlendLayer-NAOeIBrJ.js";import{e as x}from"./CustomParametersMixin-BV_eMTQG.js";import{b as z}from"./OperationalLayer-BXC_y2ag.js";import{j as K}from"./PortalLayer-Bfb4Yz4i.js";import{f as H}from"./RefreshableLayer-gUs4Io41.js";import{t as V}from"./ScaleRangeLayer-DdjRLhTq.js";import{y as Y}from"./commonProperties-DHonAk3K.js";import{I as B}from"./knowledgeGraphService-Bj9dHz_e.js";import"./OptimizedFeature-zQ3eDxBg.js";import"./memoryEstimations-Dnq1bqq3.js";import"./constants-B4mRqufT.js";import"./featureConversionUtils-DaTkq0aa.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./GraphicsLayer-KrSkE7S7.js";import"./ElevationInfo-ukDqzj81.js";import"./lengthUtils-vAKwy5vA.js";import"./GraphQueryStreaming-3WRwVoRX.js";import"./FeatureStore-BKtk2q3S.js";import"./BoundsStore-WWpasunw.js";import"./PooledRBush-CemdewQv.js";import"./timeSupport-BOnH1XVm.js";import"./queryUtils-ByUpKWbY.js";import"./json-Wa8cmqdu.js";import"./optimizedFeatureQueryEngineAdapter-C36c-2D8.js";import"./QueryEngine-CPGwH_Ht.js";import"./WhereClauseCache-D0NKRxlF.js";import"./LRUCache-CL5msEC4.js";import"./MemCache-CyQuOB2V.js";import"./WhereClause-FLnVp6Pa.js";import"./TimeOnly-Klk96O4v.js";import"./QueryEngineCapabilities-B_pTbIiR.js";import"./quantizationUtils-CNqJlHNv.js";import"./utils-Cbi2ttsC.js";import"./heatmapUtils-6IWAjZwG.js";import"./vec42-gX_7tK6K.js";import"./vec4f64-o2zAXfmz.js";import"./utils-BYlckGVn.js";import"./utils-ClNWe8-c.js";import"./ClassBreaksDefinition-IZinr1gY.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-DLlMMZ57.js";import"./NormalizationBinParametersMixin-B4WGgBsH.js";import"./FieldsIndex-CWtJiWAB.js";import"./clientSideDefaults-C6zaXscP.js";import"./defaultsJSON-GKolV7NZ.js";import"./fieldProperties-ZfJwaP_e.js";import"./labelingInfo-CMtV5asE.js";import"./SimpleRenderer-CTg8-SHi.js";import"./commonProperties-tN8tMOkk.js";import"./colorRamps-Bul-GLuH.js";import"./ColorStop-6JLJSjyr.js";import"./visualVariableUtils-Bkv6x7jd.js";import"./jsonUtils-Cf285y-V.js";import"./defaults-CPpodd5l.js";import"./UniqueValueRenderer-Bu6pPUXK.js";import"./defaultCIMValues-Jn-4TiJa.js";import"./enums-BQDXKJnw.js";import"./RendererLegendOptions-Y_shaKng.js";import"./styleUtils-2TcuKJL1.js";import"./labelUtils-D2lVPNI1.js";import"./DisplayFilteredLayer-C0XuPsuj.js";import"./layerContainerType-C5CzMsLd.js";import"./scaleUtils-3I7-wBkj.js";import"./displayFilterUtils-CYar5vVX.js";import"./FeatureEffectLayer-CTeaCs-D.js";import"./FeatureEffect-CXD503XX.js";import"./jsonUtils-D0HXYIFK.js";import"./parser-WlfHVMKt.js";import"./FeatureFilter-CuYyNEic.js";import"./FeatureReductionLayer-Cq_IbCLa.js";import"./FeatureReductionSelection-0aAf2J2H.js";import"./jsonUtils-883n0g_l.js";import"./typeUtils-i1KFya8B.js";import"./ClassBreaksRenderer-1LxhKfb2.js";import"./utils-H4N3M7z_.js";import"./MD5-C9MwAd2G.js";import"./OrderedLayer-Do-ndBBk.js";import"./OrderByInfo-BQl4U9ch.js";import"./TemporalLayer-B8SUIK5z.js";import"./TimeInfo-DtF-7jVh.js";import"./FeatureSet-wkW4giZ3.js";import"./popupUtils-DG5m4f7U.js";import"./utils-DK-cxBPp.js";import"./cimSymbolUtils-Bu3KACAF.js";import"./portalItemUtils-BTEuB0Mh.js";import"./networkEnums-e-yJTH_y.js";import"./GPMessage-Drg6_GWQ.js";let r=class extends F(V(H(j(z(K(P(x(N)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(f.ofType(c)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(f.ofType(c)),this.type="knowledge-graph",this.url=null,this.addHandles(T(()=>this.layers.concat(this.tables),(t,i)=>this._handleSublayersChange(t,i),_))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(t){S(t)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await M(this)}async _fetchMetadata(){if(!this.url)throw new b("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await B(this.url);this.knowledgeGraph=e,this._forEachGraphType(t=>{t.name&&this._graphTypeLookup.set(t.name,t)})}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===y.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new G({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await O(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(t=>{const i=this._graphTypeLookup.get(t.graphTypeName);i&&!e.namedTypeDefinitions.has(i.name)&&e.namedTypeDefinitions.set(i.name,{useAllData:!0})}),this.setAtOrigin("inclusionModeDefinition",e,D(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:t}=e;if((t==null?void 0:t.size)>0)t.forEach((i,a)=>{const o=this._graphTypeLookup.get(a);if(!o)return g.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void t.delete(a);o.type!=="relationship"&&o.type!=="entity"&&(g.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),t.delete(a))});else if(!e.generateAllSublayers)throw new b("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){var o,n;let e=[],t=[];const{inclusionModeDefinition:i}=this,a=i==null?void 0:i.namedTypeDefinitions;!i||i.generateAllSublayers?(e=((o=this.knowledgeGraph.dataModel)==null?void 0:o.entityTypes)??[],t=((n=this.knowledgeGraph.dataModel)==null?void 0:n.relationshipTypes)??[]):a&&a.size>0&&a.forEach((p,l)=>{const h=this._graphTypeLookup.get(l);switch(h==null?void 0:h.type){case"relationship":t.push(h);break;case"entity":e.push(h)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=t}_forEachGraphType(e){var t,i;[...((t=this.knowledgeGraph.dataModel)==null?void 0:t.entityTypes)??[],...((i=this.knowledgeGraph.dataModel)==null?void 0:i.relationshipTypes)??[]].forEach(a=>{e(a)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const i of e)this.sublayerIdsCache.has(i.typeName)||(this.sublayerIdsCache.set(i.typeName,new Set),t.push(i.typeName)),this.sublayerIdsCache.get(i.typeName).add(i.id);for(const i of t){const a=this._graphTypeLookup.get(i);a&&(this._addSublayer(a),a.type==="entity"?this.dataManager.entityTypeNames.add(i):this.dataManager.relationshipTypeNames.add(i),this.dataManager.sublayerCaches.set(i,new Map))}await M(this,t),this._refreshNamedTypes()}_createSublayers(e,t,i){e.forEach(a=>{const o=this._createSublayer(a);i(o)&&t.push(o),this._updateSublayerCaches(a)})}_addSublayer(e){const t=this._createSublayer(e);return t.geometryType?this.layers.push(t):this.tables.push(t),t}_createSublayer(e){return new c({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,t){t.forEach(i=>{i.parentCompositeLayer=this;const a=e.find(o=>o.type===i.graphType&&o.name===i.graphTypeName);a&&(i.objectType=a,this._updateSublayerCaches(a))})}_updateSublayerCaches(e){const t=this.dataManager.sublayerCaches;t.has(e.name)||t.set(e.name,new Map)}_saveUrlAsNewResource(e,t,i,a){e[t]="<pending>",i.pendingOperations.push(W(this.inclusionModeDefinition).then(o=>{const n=Z(a);e[t]=n.itemRelativeUrl,i.toAdd.push({resource:n,content:{type:"blob",blob:o},compress:!1,finish:p=>{this.definitionSetMap=p.url}})}))}_displaysAllRecords(e){for(const[,{useAllData:t}]of e.namedTypeDefinitions)if(!t)return!1;return!0}_handleSublayersChange(e,t){t&&(t.forEach(i=>{i.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(i=>{i.parent=this}),this.addHandles([e.on("after-add",({item:i})=>{i.parent=this}),e.on("after-remove",({item:i})=>{i.parent=null})],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=y.PORTAL_ITEM&&e<y.USER}readDefinitionSetMap(e,t,i){return L(e,i)}writeDefinitionSetMap(e,t,i,a){const o=a==null?void 0:a.portalItem,n=a==null?void 0:a.resources,p=v(a==null?void 0:a.origin);if(!o||!n||p==null)return void(e&&(t[i]=w(e,a)));const{inclusionModeDefinition:l}=this;if(!l||this._displaysAllRecords(l))return void(this.definitionSetMap=null);const h=this.originIdOf("inclusionModeDefinition");if(h===y.USER||this._namedTypesModified||p<h)this._saveUrlAsNewResource(t,i,n,o);else if(p===h&&e){const u=w(e,a);A(u)?this._saveUrlAsNewResource(t,i,n,o):t[i]=u}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):g.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){var t,i;const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.originIdOf("layers")===y.DEFAULTS?this._createSublayers(e,this.layers,a=>!!a.geometryType):this._updateSublayers(e,this.layers),this.originIdOf("tables")===y.DEFAULTS?this._createSublayers(e,this.tables,a=>!a.geometryType):this._updateSublayers(e,this.tables),(i=(t=this.dataManager.inclusionModeDefinition)==null?void 0:t.namedTypeDefinitions)==null||i.forEach((a,o)=>{var p;const n=E(this.sublayerIdsCache,o,()=>new Set);(p=a.members)==null||p.forEach(l=>{n.add(l.id)})})}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async removeRecords(e){var i,a,o,n,p,l,h,u;await this.load();const t=[];for(const m of e)((o=(a=(i=this.dataManager.inclusionModeDefinition)==null?void 0:i.namedTypeDefinitions)==null?void 0:a.get(m.typeName))==null?void 0:o.useAllData)===!1&&((h=(l=(p=(n=this.dataManager.inclusionModeDefinition)==null?void 0:n.namedTypeDefinitions)==null?void 0:p.get(m.typeName))==null?void 0:l.members)!=null&&h.has(m.id))&&t.push(m);this.dataManager.removeFromLayer(t);for(const m of t)(u=this.sublayerIdsCache.get(m.typeName))==null||u.delete(m.id);return this._refreshNamedTypes(),t}};s([d()],r.prototype,"dataManager",void 0),s([d({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],r.prototype,"definitionSetMap",void 0),s([k("definitionSetMap")],r.prototype,"readDefinitionSetMap",null),s([$("definitionSetMap")],r.prototype,"writeDefinitionSetMap",null),s([d()],r.prototype,"inclusionModeDefinition",null),s([d()],r.prototype,"knowledgeGraph",void 0),s([d({type:f.ofType(c),json:{write:{ignoreOrigin:!0}}})],r.prototype,"layers",void 0),s([d()],r.prototype,"memberEntityTypes",void 0),s([d()],r.prototype,"memberRelationshipTypes",void 0),s([d({type:["KnowledgeGraphLayer"]})],r.prototype,"operationalLayerType",void 0),s([d()],r.prototype,"sublayerIdsCache",void 0),s([d({type:f.ofType(c),json:{write:{ignoreOrigin:!0}}})],r.prototype,"tables",void 0),s([d({json:{read:!1}})],r.prototype,"type",void 0),s([d(Y)],r.prototype,"url",void 0),r=s([R("esri.layers.KnowledgeGraphLayer")],r);const $t=r;async function W(e){const t=await U(e);return new Blob([t],{type:"application/x-protobuf"})}function Z(e){const t=`definitionSetMap-${I()}.dat`,i=C("knowledgeGraphLayer",t);return e.resourceFromPath(i)}export{$t as default};
