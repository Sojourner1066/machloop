const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/streamLayerUtils-CtgaohM9.js","assets/utils-CEPdDB5t.js","assets/index-BK4NQ6A4.js","assets/index-CrYBktwj.css","assets/originUtils-D69mHv66.js","assets/multiOriginJSONSupportUtils-C0wm8_Yw.js","assets/jsonContext-BffJQdvX.js","assets/portalItemUtils-BTEuB0Mh.js","assets/saveUtils-BYlmVGKO.js","assets/createConnection-CJu9nOep.js","assets/query-B1hhPvrT.js","assets/pbfQueryUtils-D8MMr7f-.js","assets/pbf-DbTPZ4KN.js","assets/memoryEstimations-Dnq1bqq3.js","assets/OptimizedFeature-zQ3eDxBg.js","assets/OptimizedFeatureSet-Blu9Ckm7.js","assets/queryZScale-BIqYmUxy.js"])))=>i.map(i=>d[i]);
import{ap as _,o as t,v as i,w as I,cg as F,d3 as E,a9 as x,fv as A,s as d,a5 as O,hg as f,n as k,_ as v,ec as y,fZ as D,c4 as C,a6 as N,bX as U,cf as L,bE as V,cc as g,y as G,bp as w,aB as J}from"./index-BK4NQ6A4.js";import{S as M}from"./MultiOriginJSONSupport-DUKBa-dg.js";import{l as z}from"./ArcGISService-DgY4yFJj.js";import{p as q}from"./BlendLayer-NAOeIBrJ.js";import{e as W}from"./CustomParametersMixin-BV_eMTQG.js";import{a as B}from"./DisplayFilteredLayer-C0XuPsuj.js";import{c as Q}from"./FeatureEffectLayer-CTeaCs-D.js";import{d as X}from"./FeatureReductionLayer-Cq_IbCLa.js";import{b as Z}from"./OperationalLayer-BXC_y2ag.js";import{j as H}from"./PortalLayer-Bfb4Yz4i.js";import{f as K}from"./RefreshableLayer-gUs4Io41.js";import{t as Y}from"./ScaleRangeLayer-DdjRLhTq.js";import{l as ee}from"./TemporalLayer-B8SUIK5z.js";import{e as te}from"./TrackableLayer-BcpCN3yj.js";import{p as re,d as ie,v as oe,j as se,l as ne,s as ae,y as pe}from"./commonProperties-DHonAk3K.js";import{t as le,n as de,C as me}from"./labelingInfo-CMtV5asE.js";import{s as ce}from"./fieldProperties-ZfJwaP_e.js";import{_ as ue}from"./streamLayerUtils-CKwt2uXH.js";import{o as ye}from"./jsonUtils-883n0g_l.js";import{t as he}from"./styleUtils-Cyz4RLww.js";import{u as fe,m as ve}from"./typeUtils-i1KFya8B.js";import{p as ge}from"./popupUtils-DG5m4f7U.js";import{h as we}from"./ElevationInfo-ukDqzj81.js";import{A as c}from"./interfaces-CL2NbQte.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-D0HXYIFK.js";import"./parser-WlfHVMKt.js";import"./scaleUtils-3I7-wBkj.js";import"./displayFilterUtils-CYar5vVX.js";import"./FeatureEffect-CXD503XX.js";import"./FeatureFilter-CuYyNEic.js";import"./FeatureReductionSelection-0aAf2J2H.js";import"./SimpleRenderer-CTg8-SHi.js";import"./commonProperties-tN8tMOkk.js";import"./colorRamps-Bul-GLuH.js";import"./ColorStop-6JLJSjyr.js";import"./visualVariableUtils-Bkv6x7jd.js";import"./lengthUtils-vAKwy5vA.js";import"./jsonUtils-Cf285y-V.js";import"./defaults-CPpodd5l.js";import"./defaultsJSON-GKolV7NZ.js";import"./MD5-C9MwAd2G.js";import"./portalItemUtils-BTEuB0Mh.js";import"./TimeInfo-DtF-7jVh.js";import"./UniqueValueRenderer-Bu6pPUXK.js";import"./defaultCIMValues-Jn-4TiJa.js";import"./enums-BQDXKJnw.js";import"./RendererLegendOptions-Y_shaKng.js";import"./styleUtils-2TcuKJL1.js";import"./NormalizationBinParametersMixin-B4WGgBsH.js";import"./labelUtils-D2lVPNI1.js";import"./FieldsIndex-CWtJiWAB.js";import"./ClassBreaksRenderer-1LxhKfb2.js";import"./LRUCache-CL5msEC4.js";import"./MemCache-CyQuOB2V.js";import"./utils-H4N3M7z_.js";import"./heatmapUtils-6IWAjZwG.js";import"./vec42-gX_7tK6K.js";import"./vec4f64-o2zAXfmz.js";var h;let l=h=class extends _{constructor(){super(...arguments),this.age=null,this.ageReceived=null,this.displayCount=null,this.maxObservations=1}clone(){return new h({age:this.age,ageReceived:this.ageReceived,displayCount:this.displayCount,maxObservations:this.maxObservations})}};t([i({type:Number,json:{write:!0}})],l.prototype,"age",void 0),t([i({type:Number,json:{write:!0}})],l.prototype,"ageReceived",void 0),t([i({type:Number,json:{write:!0}})],l.prototype,"displayCount",void 0),t([i({type:Number,json:{write:!0}})],l.prototype,"maxObservations",void 0),l=h=t([I("esri.layers.support.PurgeOptions")],l);const $=l,b=ce();function S(e,o){return new d("layer:unsupported",`Layer (${e.title}, ${e.id}) of type '${e.declaredClass}' ${o}`,{layer:e})}let r=class extends B(X(Q(q(ee(te(Y(K(z(Z(H(M(W(F.ClonableMixin(E)))))))))))))){constructor(...e){super(...e),this.copyright=null,this.definitionExpression=null,this.displayField=null,this.elevationInfo=null,this.fields=null,this.fieldsIndex=null,this.geometryDefinition=null,this.geometryType=null,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.maxReconnectionAttempts=0,this.maxReconnectionInterval=20,this.maxScale=0,this.minScale=0,this.objectIdField=null,this.operationalLayerType="ArcGISStreamLayer",this.outFields=["*"],this.popupEnabled=!0,this.popupTemplate=null,this.purgeOptions=new $,this.refreshInterval=0,this.screenSizePerspectiveEnabled=!0,this.sourceJSON=null,this.spatialReference=x.WGS84,this.type="stream",this.url=null,this.updateInterval=300,this.useViewTime=!0,this.webSocketUrl=null,this._debouncedSaveOperations=A(async(o,s,a)=>{const{save:n,saveAs:p}=await v(()=>import("./streamLayerUtils-CtgaohM9.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));switch(o){case c.SAVE:return n(this,s);case c.SAVE_AS:return p(this,a,s)}})}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){if(!("WebSocket"in globalThis))return this.addResolvingPromise(Promise.reject(new d("stream-layer:websocket-unsupported","WebSocket is not supported in this browser. StreamLayer will not have real-time connection with the stream service."))),Promise.resolve(this);const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Stream Service","Feed"]},e).catch(O).then(()=>this._fetchService(o))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}set featureReduction(e){const o=this._normalizeFeatureReduction(e);this._set("featureReduction",o)}set renderer(e){f(e,this.fieldsIndex),this._set("renderer",e)}readRenderer(e,o,s){var n;o=o.layerDefinition||o;const a=(n=o.drawingInfo)==null?void 0:n.renderer;if(a){const p=ye(a,o,s)||void 0;return p||k.getLogger(this).error("Failed to create renderer",{rendererDefinition:o.drawingInfo.renderer,layer:this,context:s}),p}return le(o,s)}async connect(e){const[{createConnection:o}]=await Promise.all([v(()=>import("./createConnection-CJu9nOep.js"),__vite__mapDeps([9,2,3,10,11,12,13,14,15,16])),this.load()]),s=this.geometryType?y.toJSON(this.geometryType):null,{customParameters:a=null,definitionExpression:n=null,geometryDefinition:p=null,maxReconnectionAttempts:j=0,maxReconnectionInterval:R=20,spatialReference:T=this.spatialReference}=e||this.createConnectionParameters(),m=o(this.parsedUrl,this.spatialReference,T,s,n,p,j,R,a??void 0),P=D([this.on("send-message-to-socket",u=>m.sendMessageToSocket(u)),this.on("send-message-to-client",u=>m.sendMessageToClient(u))]);return m.once("destroy",P.remove),m}createConnectionParameters(){return{spatialReference:this.spatialReference,customParameters:this.customParameters,definitionExpression:this.definitionExpression,geometryDefinition:this.geometryDefinition,maxReconnectionAttempts:this.maxReconnectionAttempts,maxReconnectionInterval:this.maxReconnectionInterval}}createPopupTemplate(e){return ge(this,e)}createQuery(){const e=new C;return e.returnGeometry=!0,e.outFields=["*"],e.where=this.definitionExpression||"1=1",e}getFieldDomain(e,o){if(!this.fields)return null;let s=null;return this.fields.some(a=>(a.name===e&&(s=a.domain),!!s)),s}getField(e){return this.fieldsIndex.get(e)}serviceSupportsSpatialReference(e){return!0}sendMessageToSocket(e){this.emit("send-message-to-socket",e)}sendMessageToClient(e){this.emit("send-message-to-client",e)}async save(e){return this._debouncedSaveOperations(c.SAVE,e)}async saveAs(e,o){return this._debouncedSaveOperations(c.SAVE_AS,o,e)}write(e,o){const s=o==null?void 0:o.messages;return this.webSocketUrl?(s==null||s.push(S(this,"using a custom websocket connection cannot be written to web scenes and web maps")),null):this.parsedUrl?super.write(e,o):(s==null||s.push(S(this,"using a client-side only connection without a url cannot be written to web scenes and web maps")),null)}async _fetchService(e){var o,s,a;if(!this.webSocketUrl&&this.parsedUrl){if(!this.sourceJSON){const{data:n}=await N(this.parsedUrl.path,{query:{f:"json",...this.customParameters,...this.parsedUrl.query},responseType:"json",signal:e});this.sourceJSON=n}}else{if(!((o=this.timeInfo)!=null&&o.trackIdField))throw new d("stream-layer:missing-metadata","The stream layer trackIdField must be specified.");if(!this.objectIdField){const n=(s=this.fields.find(p=>p.type==="oid"))==null?void 0:s.name;if(!n)throw new d("stream-layer:missing-metadata","The stream layer objectIdField must be specified.");this.objectIdField=n}if(!this.fields)throw new d("stream-layer:missing-metadata","The stream layer fields must be specified.");if(this.fields.some(n=>n.name===this.objectIdField)||this.fields.push(new U({name:this.objectIdField,alias:this.objectIdField,type:"oid"})),!this.geometryType)throw new d("stream-layer:missing-metadata","The stream layer geometryType must be specified.");this.webSocketUrl&&(this.url=this.webSocketUrl)}return this.read(this.sourceJSON,{origin:"service",portalItem:this.portalItem,portal:(a=this.portalItem)==null?void 0:a.portal,url:this.parsedUrl}),f(this.renderer,this.fieldsIndex),L(this.timeInfo,this.fieldsIndex),this.objectIdField||(this.objectIdField=ue),he(this,{origin:"service"})}};t([i({type:String})],r.prototype,"copyright",void 0),t([i({readOnly:!0})],r.prototype,"defaultPopupTemplate",null),t([i({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],r.prototype,"definitionExpression",void 0),t([i({type:String})],r.prototype,"displayField",void 0),t([i({type:we})],r.prototype,"elevationInfo",void 0),t([i({json:{origins:{"web-map":{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-scene":{read:!1,write:!1}}}})],r.prototype,"featureReduction",null),t([i(b.fields)],r.prototype,"fields",void 0),t([i(b.fieldsIndex)],r.prototype,"fieldsIndex",void 0),t([i({type:V,json:{name:"layerDefinition.definitionGeometry",write:!0}})],r.prototype,"geometryDefinition",void 0),t([i({type:y.apiValues,json:{read:{reader:y.read}}})],r.prototype,"geometryType",void 0),t([i(re)],r.prototype,"labelsVisible",void 0),t([i({type:[me],json:{name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:de},write:!0}})],r.prototype,"labelingInfo",void 0),t([i(ie)],r.prototype,"legendEnabled",void 0),t([i({type:["show","hide"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),t([i({type:g})],r.prototype,"maxReconnectionAttempts",void 0),t([i({type:g})],r.prototype,"maxReconnectionInterval",void 0),t([i(oe)],r.prototype,"maxScale",void 0),t([i(se)],r.prototype,"minScale",void 0),t([i({type:String})],r.prototype,"objectIdField",void 0),t([i({value:"ArcGISStreamLayer",type:["ArcGISStreamLayer"]})],r.prototype,"operationalLayerType",void 0),t([i({readOnly:!0})],r.prototype,"outFields",void 0),t([i(ne)],r.prototype,"popupEnabled",void 0),t([i({type:G,json:{name:"popupInfo",write:!0}})],r.prototype,"popupTemplate",void 0),t([i({type:$})],r.prototype,"purgeOptions",void 0),t([i({json:{read:!1,write:!1}})],r.prototype,"refreshInterval",void 0),t([i({types:ve,json:{origins:{service:{write:{target:"drawingInfo.renderer",enabled:!1}},"web-scene":{name:"layerDefinition.drawingInfo.renderer",types:fe,write:!0}},write:{target:"layerDefinition.drawingInfo.renderer"}}})],r.prototype,"renderer",null),t([w("service","renderer",["drawingInfo.renderer","defaultSymbol"]),w("renderer",["layerDefinition.drawingInfo.renderer","layerDefinition.defaultSymbol"])],r.prototype,"readRenderer",null),t([i((()=>{const e=J(ae);return e.json.origins["portal-item"]={read:!1,write:!1},e})())],r.prototype,"screenSizePerspectiveEnabled",void 0),t([i()],r.prototype,"sourceJSON",void 0),t([i({type:x,json:{origins:{service:{read:{source:"spatialReference"}}}}})],r.prototype,"spatialReference",void 0),t([i({json:{read:!1}})],r.prototype,"type",void 0),t([i(pe)],r.prototype,"url",void 0),t([i({type:Number})],r.prototype,"updateInterval",void 0),t([i({json:{read:!1,write:!1}})],r.prototype,"useViewTime",void 0),t([i({type:String})],r.prototype,"webSocketUrl",void 0),r=t([I("esri.layers.StreamLayer")],r);const jt=r;export{jt as default};
