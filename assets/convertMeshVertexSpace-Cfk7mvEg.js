import{a2 as s,s as m,aB as p}from"./index-BCOvYjsd.js";import{p as n}from"./MeshVertexAttributes-DyZCDKxT.js";import{B as a}from"./vertexSpaceConversion-BUkaXppT.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-BYsBZJyV.js";import"./computeTranslationToOriginAndRotation-BveyOUsd.js";import"./projectPointToVector-C7Ha1avU.js";import"./meshVertexSpaceUtils-Dau0Be-_.js";import"./MeshLocalVertexSpace-DuiteUA8.js";import"./vec3-CMpiTgOg.js";import"./BufferView-D0KxYgAz.js";import"./vec42-BnNr_Lzs.js";import"./vec4-_4-I52wh.js";async function M(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
