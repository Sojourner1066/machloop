import{s as d,a2 as c,ai as T,e5 as E,cl as q,n as g,a3 as y,k as C,j as P}from"./index-BnvXCOal.js";import{s as I,u as $}from"./featureConversionUtils-CmFMXzn8.js";import{u as b}from"./executeQueryForSnapping-liJQ_Q3r.js";import{f as j}from"./FeatureStore-3F4g1OWe.js";import{x as N,j as O}from"./queryUtils-BbXXCFfE.js";import{L as Q}from"./QueryEngine-BzlhqoCr.js";import{E as k,N as M}from"./geojson-DuBW7e8H.js";import{g as L}from"./sourceUtils-DbXHQn1b.js";import{o as A,e as U,K as _}from"./wfsUtils-CKg7ufUL.js";import{Z}from"./FieldsIndex-BUP-kEKc.js";import"./OptimizedFeature-C6mq9JTm.js";import"./memoryEstimations-CgKxTfPy.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./timeSupport-CCVo9mx-.js";import"./BoundsStore-BNTaLKxL.js";import"./PooledRBush-CPIS6Hd_.js";import"./optimizedFeatureQueryEngineAdapter-GcjfMA_3.js";import"./json-Wa8cmqdu.js";import"./WhereClauseCache-Dgrdb1iY.js";import"./LRUCache-CVkPrTgN.js";import"./MemCache-C-Nfx2no.js";import"./WhereClause-DxC4tFtf.js";import"./TimeOnly-CK6o1IbC.js";import"./QueryEngineCapabilities-B_pTbIiR.js";import"./quantizationUtils-BIxUeD3r.js";import"./utils-BrCcQfny.js";import"./heatmapUtils-CtONkQbG.js";import"./vec42-r_rjmetX.js";import"./vec4f64-o2zAXfmz.js";import"./utils-BRTuCz6Z.js";import"./utils-B_zU764D.js";import"./ClassBreaksDefinition-BpDSQ-DZ.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-DGm8_bSu.js";import"./NormalizationBinParametersMixin-DSi88dGc.js";import"./date-Ctp1FiBW.js";import"./xmlUtils-CtUoQO7q.js";const x="esri.layers.WFSLayer";class qt{constructor(){this._customParameters=null,this._queryEngine=null,this._supportsPagination=!0}destroy(){var t;(t=this._queryEngine)==null||t.destroy(),this._queryEngine=null}async load(t,e={}){const{getFeatureUrl:a,getFeatureOutputFormat:s,fields:i,geometryType:u,featureType:o,maxRecordCount:n,maxTotalRecordCount:m,maxPageCount:R,objectIdField:f,customParameters:F}=t,{spatialReference:h,getFeatureSpatialReference:p}=A(a,o,t.spatialReference);try{await N(p,h)}catch{throw new d("unsupported-projection","Projection not supported",{inSpatialReference:p,outSpatialReference:h})}c(e),this._customParameters=F,this._featureType=o,this._fieldsIndex=Z.fromLayerJSON({fields:i,dateFieldsTimeReference:i.some(S=>S.type==="esriFieldTypeDate")?{timeZoneIANA:T}:null}),this._geometryType=u,this._getFeatureUrl=a,this._getFeatureOutputFormat=s,this._getFeatureSpatialReference=p,this._maxRecordCount=n,this._maxTotalRecordCount=m,this._maxPageCount=R,this._objectIdField=f,this._spatialReference=h;let l=await this._snapshotFeatures(e);if(l.errors.length>0&&(this._supportsPagination=!1,l=await this._snapshotFeatures(e),l.errors.length>0))throw l.errors[0];return this._queryEngine=new Q({fieldsIndex:this._fieldsIndex,geometryType:u,hasM:!1,hasZ:!1,objectIdField:f,spatialReference:h,timeInfo:null,featureStore:new j({geometryType:u,hasM:!1,hasZ:!1})}),this._queryEngine.featureStore.addMany(l.features),{warnings:w(l),extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new d("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),(await this._queryEngine.executeQueryForIds(t,e.signal)).filter(E)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),b(this._queryEngine,t,e.signal)}async queryAttributeBins(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(t,e.signal)}async refresh(t){var e;return this._customParameters=t.customParameters,this._maxRecordCount=t.maxRecordCount,this._maxTotalRecordCount=t.maxTotalRecordCount,this._maxPageCount=t.maxPageCount,(e=this._snapshotTask)==null||e.abort(),this._snapshotTask=q(a=>this._snapshotFeatures({signal:a})),this._snapshotTask.promise.then(a=>{var s;this._queryEngine.featureStore.clear(),this._queryEngine.featureStore.addMany(a.features);for(const i of w(a))g.getLogger(x).warn(new y("wfs-layer:refresh-warning",i.message,i.details));(s=a.errors)!=null&&s.length&&g.getLogger(x).warn(new y("wfs-layer:refresh-error","Refresh completed with errors",{errors:a.errors}))},()=>{this._queryEngine.featureStore.clear()}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _snapshotFeatures(t){const e=t==null?void 0:t.signal,a=this._maxTotalRecordCount,s=this._maxPageCount,i=this._supportsPagination?await U(this._getFeatureUrl,this._featureType.typeName,{customParameters:this._customParameters,signal:e}):void 0;let u=[];const o=[];if(i==null)try{u=await this._singleQuery(e)}catch(n){C(n)||o.push(n)}else{const n=Math.min(i,a),m=J(this,Math.max(1,Math.min(Math.ceil(n/this._maxRecordCount),s)),e);await Promise.allSettled(Array.from({length:10}).map(()=>v(m,u,o)))}return c(e),{features:u,totalRecordCount:i,maxTotalRecordCount:a,maxPageCount:s,errors:o}}async _singleQuery(t){const e=await _(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,signal:t});return this._processGeoJSON(e,{signal:t})}async _pageQuery(t,e){const a=t*this._maxRecordCount,s=await _(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,startIndex:a,count:this._maxRecordCount,signal:e});return this._processGeoJSON(s,{startIndex:a,signal:e})}_processGeoJSON(t,e){k(t,this._getFeatureSpatialReference.wkid);const{startIndex:a,signal:s}=e;c(s);const i=M(t,{geometryType:this._geometryType,hasZ:!1,objectIdField:this._objectIdField});if(!P(this._spatialReference,this._getFeatureSpatialReference))for(const o of i)o.geometry!=null&&(o.geometry=I(O($(o.geometry,this._geometryType,!1,!1),this._getFeatureSpatialReference,this._spatialReference)));let u=a??1;for(const o of i){const n={};L(this._fieldsIndex,n,o.attributes,!0),o.attributes=n,n[this._objectIdField]==null&&(o.objectId=n[this._objectIdField]=u++)}return i}}function*J(r,t,e){for(let a=0;a<t;a++)yield r._pageQuery(a,e)}async function v(r,t,e){let a=r.next();for(;!a.done;){try{const s=await a.value;t.push(...s)}catch(s){C(s)||e.push(s)}a=r.next()}}function w(r){const t=[];return r.totalRecordCount!=null&&(r.features.length<r.totalRecordCount&&t.push({name:"wfs-layer:maxRecordCount-too-low",message:`Could only fetch ${r.features.length} of ${r.totalRecordCount} in ${r.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`,details:{recordCount:r.features.length,totalRecordCount:r.totalRecordCount}}),r.totalRecordCount>r.maxTotalRecordCount&&t.push({name:"wfs-layer:large-dataset",message:`The number of ${r.totalRecordCount} features exceeds the maximum allowed of ${r.maxTotalRecordCount}.`,details:{recordCount:r.features.length,totalRecordCount:r.totalRecordCount,maxTotalRecordCount:r.maxTotalRecordCount}})),t}export{qt as default};
