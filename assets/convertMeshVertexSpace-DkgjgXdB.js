import{A as s,s as m,N as p}from"./index-BCSVvjKE.js";import{p as n}from"./MeshVertexAttributes-C5KzUnSG.js";import{B as l}from"./vertexSpaceConversion-XqQ-Gxkg.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-Dt3i00wg.js";import"./computeTranslationToOriginAndRotation-BKUgOs_N.js";import"./projectPointToVector-D4QINAum.js";import"./meshVertexSpaceUtils-C3eC4eMG.js";import"./MeshLocalVertexSpace-DVq20P2P.js";import"./vec3-tRjQ2E2L.js";import"./BufferView-BnloAaDm.js";import"./vec4-CMOwvsJ_.js";async function M(t,o,r){await Promise.resolve(),s(r);const e=l(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
