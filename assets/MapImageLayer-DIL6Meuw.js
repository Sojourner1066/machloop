import{a5 as $,eY as v,cD as f,f5 as O,a6 as g,ce as T,bE as P,f6 as E,s as x,k as L,d3 as F,o,v as a,f7 as S,bp as M,bs as R,w as _,cc as j}from"./index-BnvXCOal.js";import{S as J}from"./MultiOriginJSONSupport-DTjGkcWT.js";import{i as N}from"./scaleUtils-DL6nepZp.js";import{i as q}from"./APIKeyMixin-BxzIIPew.js";import{m as U,f as A,s as k}from"./SublayersOwner-R2kgWX-z.js";import{l as V}from"./ArcGISService-CMMnHQ8n.js";import{p as z}from"./BlendLayer-CcS0AiVd.js";import{e as D}from"./CustomParametersMixin-e-oMFTfY.js";import{b as Z}from"./OperationalLayer-B595cCIl.js";import{j as B}from"./PortalLayer-Ctz1GNPW.js";import{f as C}from"./RefreshableLayer-CjIMOkuB.js";import{t as G}from"./ScaleRangeLayer-BfQg43Dx.js";import{l as H}from"./TemporalLayer-BMzjlo9V.js";import{y as K}from"./commonProperties-Dje_VWi3.js";import{y as W}from"./ExportImageParameters-BDgmjrwM.js";import{t as Y}from"./imageBitmapUtils-sP9kYKZ7.js";import{e as I}from"./sublayerUtils-RCu1hqFT.js";import{t as Q}from"./versionUtils-BLqwfjHu.js";import"./portalItemUtils-BChta--g.js";import"./QueryTask-DvE4KE_I.js";import"./infoFor3D-dHKPbXlj.js";import"./executeForIds-BuRaK3W7.js";import"./query-BO9TePHk.js";import"./pbfQueryUtils-B-aOvyq_.js";import"./pbf-BH4GZv32.js";import"./memoryEstimations-CgKxTfPy.js";import"./OptimizedFeature-C6mq9JTm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-DXxr31Yj.js";import"./executeQueryJSON-BlV9oJL9.js";import"./FeatureSet-BGraDqhW.js";import"./featureConversionUtils-CmFMXzn8.js";import"./OrderedLayer-BC8cCfv9.js";import"./OrderByInfo-CijLf-Rk.js";import"./labelingInfo-BY_2bmzW.js";import"./SimpleRenderer--05LNEAo.js";import"./commonProperties-BtmAPvhe.js";import"./colorRamps-BtHD6lRq.js";import"./ColorStop-DKLIbh6w.js";import"./visualVariableUtils-CsmTuDyq.js";import"./lengthUtils-BULRlDy9.js";import"./jsonUtils-Du5tZPpz.js";import"./defaults-Bcfj-Otq.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-C2h8zTjm.js";import"./defaultCIMValues-ubRuA6gU.js";import"./enums-BQDXKJnw.js";import"./RendererLegendOptions-FePfC4i6.js";import"./styleUtils-CWAJkKJj.js";import"./NormalizationBinParametersMixin-DSi88dGc.js";import"./labelUtils-amu_CKvT.js";import"./FeatureType-Dfb1gMNl.js";import"./FeatureTemplate-BW4OCTA_.js";import"./FieldsIndex-BUP-kEKc.js";import"./LayerFloorInfo-vlLwnEHX.js";import"./Relationship-gCjArXij.js";import"./serviceCapabilitiesUtils-cI46m0Y5.js";import"./typeUtils-HA9kMi7L.js";import"./ClassBreaksRenderer-ZZL7GgAC.js";import"./LRUCache-CVkPrTgN.js";import"./MemCache-C-Nfx2no.js";import"./utils-DczMxsh3.js";import"./heatmapUtils-CtONkQbG.js";import"./vec42-r_rjmetX.js";import"./vec4f64-o2zAXfmz.js";import"./popupUtils-ayqQpIwT.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-DNdrYfyn.js";import"./parser-BqlCI5FX.js";import"./TimeInfo-iD1UOhx1.js";import"./ElevationInfo-_zkowxr5.js";import"./floorFilterUtils-DZ5C6FQv.js";let i=class extends z(H(G(U(A(V(Z(B(J(C(q(D(F)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new W({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch($).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,n,t){var l,d,b;if(!this.loaded||!e)return;const s=e.slice().reverse().flatten(({sublayers:m})=>m&&m.toArray().reverse()).toArray();let p=!1;const h=v(t.origin);if((l=this.capabilities)!=null&&l.operations.supportsExportMap&&((b=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&b.supportsDynamicLayers)){if(h===f.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;p=I(s,m,f.SERVICE)}else if(h>f.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");p=I(s,m.sublayers,v(m.origin))}}const y=[],c={writeSublayerStructure:p,...t};let u=p||this.hasVisibleLayersForOrigin(h);s.forEach(m=>{const w=m.write({},c);y.push(w),u=u||m.originOf("visible")==="user"}),y.some(m=>Object.keys(m).length>1)&&(r.layers=y),u&&(r.visibleLayers=s.filter(m=>m.visible).map(m=>m.id))}createExportImageParameters(e,r,n,t){const s=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=N({extent:e,width:r})*s;const p=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},y=e==null?void 0:e.spatialReference,c=O(y);p.dpi*=s;const u={};if(t!=null&&t.timeExtent){const{start:l,end:d}=t.timeExtent.toJSON();u.time=l&&d&&l===d?""+l:`${l??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(u.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:c,imageSR:c,size:r+","+n,...p,...h,...u}}async fetchImage(e,r,n,t){const{data:s}=await this._fetchImage("image",e,r,n,t);return s}async fetchImageBitmap(e,r,n,t){const{data:s,url:p}=await this._fetchImage("blob",e,r,n,t);return Y(s,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,r),{extent:t,fullExtent:s,timeExtent:p}=n,h=t||s;return{fullExtent:h&&P.fromJSON(h),timeExtent:p&&T.fromJSON({start:p[0],end:p[1]})}}loadAll(){return E(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return Q(this,e)}async _fetchImage(e,r,n,t,s){var y,c,u;const p={responseType:e,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,t,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((y=p.query)==null?void 0:y.dynamicLayers)!=null&&!((u=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&u.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:l}=await g(h,p);return{data:l,url:h}}catch(l){throw L(l)?l:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};o([a(S("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([a()],i.prototype,"dpi",void 0),o([a()],i.prototype,"gdbVersion",void 0),o([a()],i.prototype,"imageFormat",void 0),o([M("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([a()],i.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([a(S("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),o([a()],i.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([R("sublayers",{layers:{type:[k]},visibleLayers:{type:[j]}})],i.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([a(K)],i.prototype,"url",void 0),i=o([_("esri.layers.MapImageLayer")],i);const gt=i;export{gt as default};
