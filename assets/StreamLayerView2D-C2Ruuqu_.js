import{o as s,v as n,w as l,x as m,s as c,fZ as _,f as g,e5 as f}from"./index-BCOvYjsd.js";import{d as h}from"./FeatureSet-Cu8erNuw.js";import{n as v,d as S}from"./FeatureLayerView2D-CB-Mj7aj.js";import{d as C}from"./FeatureFilter-B_Ic7umv.js";import"./Container-DHvNfQYc.js";import"./parser-DAsQTtHB.js";import"./featureConversionUtils-BqGgJklF.js";import"./OptimizedFeature-Cmc4IS8F.js";import"./memoryEstimations-cFrur3i9.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./labelingInfo-BKbU-5K2.js";import"./SimpleRenderer-QG4WFGL4.js";import"./commonProperties-Cjoc1SFO.js";import"./colorRamps-B5wCt1L1.js";import"./ColorStop-CjHsqQ4X.js";import"./visualVariableUtils-D3neASu_.js";import"./lengthUtils-CDEkLj2v.js";import"./jsonUtils-D0uTwTFl.js";import"./defaults-BaoV-fz0.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-BF3Ti4K9.js";import"./defaultCIMValues-Z8gODNqJ.js";import"./enums-BQDXKJnw.js";import"./RendererLegendOptions-CzPIuudE.js";import"./styleUtils-2G0NBrba.js";import"./NormalizationBinParametersMixin-CjJMWKZs.js";import"./labelUtils-TH8oGZfH.js";import"./timeSupport-CxGvIUMY.js";import"./AttributeBinsFeatureSet-YRnx344E.js";import"./AttributeBinsQuery-CtQellzI.js";import"./queryUtils-Ds9CE_G1.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-LwWUn2bp.js";import"./LayerView-Bh1bNDvF.js";import"./layerViewUtils-CMuPTx9a.js";import"./TechniqueInstance-CNQ6fZml.js";import"./UpdateTracking2D-Bf8IBHcl.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-CF9zyGQA.js";import"./utils-BBgV4jpp.js";import"./rasterizingUtils-Cd-Fnb0q.js";import"./floatRGBA-BBbpw5x1.js";import"./Rect-CUzevAry.js";import"./Utils-DdauoA8s.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-CHat1_4B.js";import"./VertexArrayObject-DHDfdKzA.js";import"./TileContainer-Cb1lUW9E.js";import"./WGLContainer-CCZO0g_A.js";import"./ProgramTemplate-B6BR18rz.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-DBsc2ck4.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-D1NCt0Vn.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-OVCL3yhU.js";import"./ShaderBuilder-DPUaOKaz.js";import"./BindType-BBwFZqyN.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-Dwp39X4g.js";import"./CircularArray-CujHzHWW.js";import"./OrderByInfo-DuLW7zDP.js";import"./heatmapUtils-Dzf0MiEZ.js";import"./vec42-BnNr_Lzs.js";import"./vec4f64-o2zAXfmz.js";import"./SDFHelper-iTY9Vw69.js";import"./constants-B4mRqufT.js";import"./parquet-DVhnBTOt.js";import"./displayFilterUtils-BEQXfej1.js";import"./FeatureEffect-Bqiw1BNS.js";import"./jsonUtils--jgndNN5.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-oqbE8F_z.js";import"./RefreshableLayerView-nU9-K61T.js";const w=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:C})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let o=class extends w(S){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return _(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return g(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return v(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const u=h.fromJSON(y);return u.features.forEach(d=>{d.layer=this.layer,d.sourceLayer=this.layer}),u}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(f)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([l("esri.views.2d.layers.StreamLayerView2D")],o);const ze=o;export{ze as default};
